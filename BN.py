# -*- coding: utf-8 -*-
# ===================================================================
# --- ๐ค ุจูุช ุจุงููุงูุณ ุงููุจุฏุฆู - ุงูุฅุตุฏุงุฑ 1.0 ๐ค ---
# ===================================================================
#
#  ูุฐุง ูู ููุฏ ูุจุณุท ูููุซูู ููุจุฏุก.
#  ุงููููุฉ: ุงูุงุชุตุงู ุจุชููุฌุฑุงู ูุจุงููุงูุณ ูุนุฑุถ ุงูุฑุตูุฏ.
#  ูุนุชูุฏ ุนูู ููุชุจุฉ ccxt ุงูุชู ูุฌุญุช ูู ุงุฎุชุจุงุฑูุง ุงูุณุงุจู.
#
# ===================================================================

import os
import logging
import asyncio
import ccxt.async_support as ccxt
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode

# --- ุฅุนุฏุงุฏุงุช ุฃุณุงุณูุฉ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- ุฌูุจ ุงููุชุบูุฑุงุช ูู ุจูุฆุฉ ุงูุชุดุบูู (PM2) ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')

# --- ูุธุงุฆู ุงูุฃูุงูุฑ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ูุฑุณู ุฑุณุงูุฉ ุชุฑุญูุจูุฉ ุนูุฏ ุฅุฑุณุงู ุฃูุฑ /start."""
    keyboard = [["๐ฐ ุนุฑุถ ุงูุฑุตูุฏ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    welcome_message = (
        "ุฃููุงู ุจู ูู ุจูุช ุจุงููุงูุณ ุงููุจุฏุฆู!\n\n"
        "ุงุณุชุฎุฏู ุงูุฒุฑ ุฃุฏูุงู ูุนุฑุถ ุฑุตูุฏู ุนูู ููุตุฉ ุจุงููุงูุณ."
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ูุชุตู ุจุจุงููุงูุณ ููุฌูุจ ุงูุฑุตูุฏ."""
    await update.message.reply_text("โณ ุฌุงุฑู ุฌูุจ ุงูุฑุตูุฏ ูู ุจุงููุงูุณุ ูุฑุฌู ุงูุงูุชุธุงุฑ...")

    if not BINANCE_API_KEY or not BINANCE_API_SECRET:
        await update.message.reply_text("๐ด ุฎุทุฃ: ููุงุชูุญ API ุงูุฎุงุตุฉ ุจุจุงููุงูุณ ุบูุฑ ููุฌูุฏุฉ.")
        return

    try:
        # ุฅุนุฏุงุฏ ุงูุงุชุตุงู ุจุจุงููุงูุณ
        exchange = ccxt.binance({
            'apiKey': BINANCE_API_KEY,
            'secret': BINANCE_API_SECRET,
            'enableRateLimit': True,
        })

        # ุฌูุจ ุงูุฃุฑุตุฏุฉ
        balance = await exchange.fetch_balance()
        
        # ุฅุบูุงู ุงูุงุชุตุงู
        await exchange.close()

        message_parts = ["**๐ฐ ุฑุตูุฏ ูุญูุธุชู ุนูู ุจุงููุงูุณ:**\n"]
        assets_found = False

        # ููุชุฑุฉ ูุนุฑุถ ุงูุฃุฑุตุฏุฉ ุงูุชู ููุง ูููุฉ ููุท
        for currency, amount in balance['total'].items():
            if amount > 0:
                assets_found = True
                # ุชูุณูู ุงูุฃุฑูุงู ุงูุตุบูุฑุฉ ุฌุฏูุง ุจุดูู ุฃูุถู
                if amount < 0.0001:
                    message_parts.append(f"- `{currency}`: `{amount:.8f}`")
                else:
                    message_parts.append(f"- `{currency}`: `{amount}`")
        
        if not assets_found:
             final_message = "ูุง ุชูุฌุฏ ุฃุตูู ุฐุงุช ูููุฉ ูู ูุญูุธุชู."
        else:
            final_message = "\n".join(message_parts)

    except ccxt.AuthenticationError:
        final_message = (
            "**๐ด ุฎุทุฃ ูู ุงููุตุงุฏูุฉ!**\n\n"
            "ูุดู ุงูุงุชุตุงู ุจุจุงููุงูุณ. ูุฑุฌู ุงูุชุญูู ูู:\n"
            "1.  ุตุญุฉ ููุงุชูุญ API.\n"
            "2.  ุตูุงุญูุงุช ุงูููุชุงุญ (ูุฌุจ ุชูุนูู ุงููุฑุงุกุฉ).\n"
            "3.  ุนุฏู ูุฌูุฏ ูููุฏ IP ุชููุน ุงูุฎุงุฏู."
        )
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน ุนูุฏ ุฌูุจ ุงูุฑุตูุฏ: {e}", exc_info=True)
        final_message = f"๐ด ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน: `{e}`"

    await update.message.reply_text(final_message, parse_mode=ParseMode.MARKDOWN)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ูุชุนุงูู ูุน ุงูุฑุณุงุฆู ุงููุตูุฉ (ุงูุฃุฒุฑุงุฑ)."""
    if update.message.text == "๐ฐ ุนุฑุถ ุงูุฑุตูุฏ":
        await show_balance(update, context)

# --- ุฏุงูุฉ ุงูุชุดุบูู ุงูุฑุฆูุณูุฉ ---
def main():
    """ุชุจุฏุฃ ุชุดุบูู ุงูุจูุช."""
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("ุฎุทุฃ ูุงุฏุญ: ูุชุบูุฑ TELEGRAM_BOT_TOKEN ุบูุฑ ููุฌูุฏ!")
        return

    logger.info("Starting bot...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # ุจุฏุก ุชุดุบูู ุงูุจูุช
    application.run_polling()
    logger.info("Bot has stopped.")

if __name__ == '__main__':
    main()
